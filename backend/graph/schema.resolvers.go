package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"skewax/graph/model"

	drive "google.golang.org/api/drive/v3"
)

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, name string, contents string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: CreateFile - createFile"))
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, id string, name string, contents string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UpdateFile - updateFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id string) (*model.File, error) {
	token, err := r.getUserToken(ctx)

	if err != nil {
		return nil, err
	}

	driveServ, err := r.Google.DriveService(token)

	if err != nil {
		return nil, err
	}

	file, err := GetFile(driveServ, id, GetPreloads(ctx))

	if err != nil {
		return nil, err
	}

	err = driveServ.Files.Delete(id).Do()

	if err != nil {
		return nil, err
	}

	return file, nil
}

// CreateDirectory is the resolver for the createDirectory field.
func (r *mutationResolver) CreateDirectory(ctx context.Context, name string, parentDirectory string) (*model.Directory, error) {
	panic(fmt.Errorf("not implemented: CreateDirectory - createDirectory"))
}

// DeleteDirectory is the resolver for the deleteDirectory field.
func (r *mutationResolver) DeleteDirectory(ctx context.Context, id string) (*model.Directory, error) {
	token, err := r.getUserToken(ctx)

	if err != nil {
		return nil, err
	}

	driveServ, err := r.Google.DriveService(token)

	if err != nil {
		return nil, err
	}

	dir, err := GetDirectory(driveServ, id, GetPreloads(ctx))

	if err != nil {
		return nil, err
	}

	err = driveServ.Files.Delete(id).Do()

	if err != nil {
		return nil, err
	}

	return dir, nil
}

// RenameDirectory is the resolver for the renameDirectory field.
func (r *mutationResolver) RenameDirectory(ctx context.Context, id string, name string) (*model.Directory, error) {
	panic(fmt.Errorf("not implemented: RenameDirectory - renameDirectory"))
}

// RenameFile is the resolver for the renameFile field.
func (r *mutationResolver) RenameFile(ctx context.Context, id string, name string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: RenameFile - renameFile"))
}

// MoveFile is the resolver for the moveFile field.
func (r *mutationResolver) MoveFile(ctx context.Context, id string, directoryID string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: MoveFile - moveFile"))
}

// MoveDirectory is the resolver for the moveDirectory field.
func (r *mutationResolver) MoveDirectory(ctx context.Context, id string, directoryID string) (*model.Directory, error) {
	panic(fmt.Errorf("not implemented: MoveDirectory - moveDirectory"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	token, err := r.getUserToken(ctx)
	if err != nil {
		return nil, err
	}

	uSrv, err := r.Google.UserService(token)
	if err != nil {
		return nil, err
	}
	userInfo, err := uSrv.Userinfo.Get().Do()
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:    userInfo.Id,
		Name:  userInfo.Name,
		Image: userInfo.Picture,
		Email: userInfo.Email,
	}, nil
}

// BaseDirectory is the resolver for the baseDirectory field.
func (r *queryResolver) BaseDirectory(ctx context.Context) (*model.Directory, error) {
	token, err := r.getUserToken(ctx)
	if err != nil {
		return nil, err
	}

	driveSrv, err := r.Google.DriveService(token)
	if err != nil {
		return nil, err
	}

	baseDirectories, err := driveSrv.Files.List().Q("mimeType = 'application/vnd.google-apps.folder' and name = 'Skewax'").Do()
	if err != nil {
		return nil, err
	}
	var baseDir *drive.File

	// If the base directory doesn't exist, create it
	if len(baseDirectories.Files) == 0 {
		baseDir, err = driveSrv.Files.Create(&drive.File{
			Name:     "Skewax",
			MimeType: "application/vnd.google-apps.folder",
		}).Do()
		if err != nil {
			return nil, err
		}
	} else {
		baseDir = baseDirectories.Files[0]
	}

	fields := GetPreloads(ctx)
	return GetDirectory(driveSrv, baseDir.Id, fields)
}

// Directory is the resolver for the directory field.
func (r *queryResolver) Directory(ctx context.Context, id string) (*model.Directory, error) {
	token, err := r.getUserToken(ctx)
	if err != nil {
		return nil, err
	}

	driveSrv, err := r.Google.DriveService(token)
	if err != nil {
		return nil, err
	}
	fields := GetPreloads(ctx)
	return GetDirectory(driveSrv, id, fields)
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
